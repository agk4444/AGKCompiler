# Async/Await Test Example - AGK Language
# This demonstrates asynchronous programming with HTTP calls

import web
import io

define function test_async_http:
    # Create async context
    web.create_http_context("demo")

    # Start multiple async HTTP requests
    create get_task as String
    set get_task to web.make_async_get_request("https://httpbin.org/get")

    create post_task as String
    set post_task to web.make_async_post_request("https://httpbin.org/post", "test=data")

    # Wait for individual responses
    create get_response as String
    set get_response to web.await_http_response(get_task)
    io.print("GET Response: " + get_response)

    create post_response as String
    set post_response to web.await_http_response(post_task)
    io.print("POST Response: " + post_response)

    # Wait for all responses at once
    create task_list as List
    add get_task to task_list
    add post_task to task_list

    create all_responses as List
    set all_responses to web.await_all_http_responses(task_list)
    io.print("All responses received: " + all_responses)

    # Cleanup
    web.cleanup_http_context("demo")
    return "Async test completed"

define function main:
    create result as String
    set result to test_async_http()
    io.print(result)
    return result