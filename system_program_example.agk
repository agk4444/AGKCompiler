# AGK System Programming Example
# Demonstrates comprehensive system programming capabilities

import os
import kernel
import hardware

# Global variables
create shared_counter as Integer = 0
create system_buffer as pointer
create device_opened as Boolean = false
create network_socket as Integer = -1

define function program_main:
    """Main system programming demonstration"""
    print("=== AGK System Programming Demonstration ===")

    # Test memory management
    test_memory_management()

    # Test file operations
    test_file_operations()

    # Test process and threading
    test_process_threading()

    # Test networking (if available)
    test_networking()

    # Test hardware access (if available)
    test_hardware_access()

    # Test atomic operations
    test_atomic_operations()

    # Test system information
    test_system_info()

    print("=== System Programming Demo Complete ===")
    return 0

define function test_memory_management:
    """Test memory allocation and management"""
    print("Testing Memory Management...")

    # Allocate memory
    set system_buffer to memory_allocate(1024)
    if system_buffer == null:
        print("ERROR: Memory allocation failed")
        return

    print("Allocated 1024 bytes of memory")

    # Use the memory
    memory_set(system_buffer, 0x41, 100)  # Fill with 'A's
    print("Set memory to 'A' characters")

    # Copy memory
    create copy_buffer as pointer = memory_allocate(512)
    if copy_buffer != null:
        memory_copy(copy_buffer, system_buffer, 100)
        print("Copied 100 bytes of memory")
        memory_free(copy_buffer)

    # Free memory
    memory_free(system_buffer)
    set system_buffer to null
    print("Freed allocated memory")

define function test_file_operations:
    """Test file system operations"""
    print("Testing File Operations...")

    # Create and write to a file
    create fd as Integer = file_open("system_test.txt", O_CREAT | O_WRONLY | O_TRUNC)
    if fd < 0:
        print("ERROR: Failed to create file")
        return
    print("Created system_test.txt")

    # Write data
    create test_data as String = "Hello, System Programming World!\nThis file was created by AGK system programming capabilities.\n"
    create bytes_written as Integer = file_write(fd, test_data, length(test_data))
    print("Wrote " + bytes_written + " bytes to file")

    # Close file
    file_close(fd)

    # Read the file back
    set fd to file_open("system_test.txt", O_RDONLY)
    if fd >= 0:
        create read_buffer as pointer = memory_allocate(256)
        create bytes_read as Integer = file_read(fd, read_buffer, 255)
        if bytes_read > 0:
            print("Read " + bytes_read + " bytes from file")
        memory_free(read_buffer)
        file_close(fd)

    print("File operations completed")

define function test_process_threading:
    """Test process and threading capabilities"""
    print("Testing Process and Threading...")

    # Get current process information
    create pid as Integer = get_process_id()
    create ppid as Integer = get_parent_process_id()
    print("Current PID: " + pid + ", Parent PID: " + ppid)

    # Test threading
    create thread_id as Integer
    create thread_data as Integer = 42

    set thread_id to thread_create(worker_thread, thread_data)
    if thread_id >= 0:
        print("Created worker thread with ID: " + thread_id)

        # Wait for thread to complete
        create thread_result as Integer
        thread_join(thread_id, thread_result)
        print("Thread completed with result: " + thread_result)
    else:
        print("ERROR: Failed to create thread")

define function worker_thread(data as Integer):
    """Worker thread function"""
    print("Worker thread started with data: " + data)

    # Simulate some work
    create i as Integer = 0
    while i < 1000000:
        set i to i + 1

    print("Worker thread completing...")
    return data * 2

define function test_networking:
    """Test networking capabilities"""
    print("Testing Networking...")

    # This is a demonstration - actual networking requires proper setup
    print("Networking test (demonstration only)")

    # Create a socket (would need proper error handling in real code)
    create socket_fd as Integer = network_socket(AF_INET, SOCK_STREAM, 0)
    if socket_fd >= 0:
        print("Created network socket: " + socket_fd)
        network_close(socket_fd)
    else:
        print("Network socket creation failed (expected in demo environment)")

define function test_hardware_access:
    """Test hardware access capabilities"""
    print("Testing Hardware Access...")

    # This is a demonstration - actual hardware access requires privileges
    print("Hardware access test (demonstration only)")

    # Test CPU information
    create vendor as String = get_cpu_vendor()
    if vendor is not null and length(vendor) > 0:
        print("CPU Vendor: " + vendor)
    else:
        print("CPU vendor detection not available")

    # Test memory barriers (no-op in user space but demonstrates API)
    memory_barrier()
    print("Memory barrier executed")

    # Test atomic operations
    create test_value as Integer = 100
    create result as Integer = atomic_increment(test_value)
    print("Atomic increment result: " + result)

define function test_atomic_operations:
    """Test atomic operations"""
    print("Testing Atomic Operations...")

    create atomic_value as Integer = 0

    # Test atomic increment
    atomic_increment(atomic_value)
    atomic_increment(atomic_value)
    print("Atomic value after two increments: " + atomic_value)

    # Test atomic exchange
    create old_value as Integer = atomic_exchange(atomic_value, 42)
    print("Atomic exchange: old=" + old_value + ", new=" + atomic_value)

define function test_system_info:
    """Test system information gathering"""
    print("Testing System Information...")

    # Get system information
    create sys_name as String = system_info("sysname")
    create node_name as String = system_info("nodename")
    create release as String = system_info("release")
    create version as String = system_info("version")
    create machine as String = system_info("machine")

    print("System Name: " + sys_name)
    print("Node Name: " + node_name)
    print("Release: " + release)
    print("Version: " + version)
    print("Machine: " + machine)

# Kernel Module Example (would be in separate file for actual kernel module)
define function kernel_module_demo:
    """Demonstrate kernel module capabilities"""
    print("Kernel Module Demo (for kernel mode)...")

    # These would only work in kernel mode
    # printk(KERN_INFO, "Hello from kernel module")
    # create kmem as pointer = kmalloc(1024, GFP_KERNEL)
    # if kmem is not null:
    #     kfree(kmem)

define function device_driver_demo:
    """Demonstrate device driver concepts"""
    print("Device Driver Demo...")

    # This demonstrates the concept - actual driver would need kernel mode
    print("Device driver registration (concept demo)")
    print("File operations: open, close, read, write, ioctl")
    print("Interrupt handling: request_irq, free_irq")
    print("Memory mapping: ioremap, iounmap")

# Memory management utilities
define function create_shared_memory(size as Integer):
    """Create a shared memory region"""
    create shared_mem as pointer = memory_allocate(size)
    if shared_mem is not null:
        memory_set(shared_mem, 0, size)
        print("Created shared memory region of " + size + " bytes")
    return shared_mem

define function destroy_shared_memory(mem as pointer, size as Integer):
    """Destroy a shared memory region"""
    if mem is not null:
        memory_free(mem)
        print("Destroyed shared memory region")

# Thread synchronization example
create thread_mutex as pointer

define function initialize_synchronization:
    """Initialize thread synchronization primitives"""
    set thread_mutex to mutex_create()
    if thread_mutex is not null:
        print("Created thread synchronization mutex")

define function cleanup_synchronization:
    """Clean up thread synchronization primitives"""
    if thread_mutex is not null:
        mutex_destroy(thread_mutex)
        print("Destroyed thread synchronization mutex")

# System call demonstration
define function demonstrate_system_calls:
    """Demonstrate system call usage"""
    print("System Call Demonstration...")

    # These are examples - actual system calls require proper setup
    print("System call numbers:")
    print("  SYS_read: " + SYS_read)
    print("  SYS_write: " + SYS_write)
    print("  SYS_open: " + SYS_open)
    print("  SYS_close: " + SYS_close)
    print("  SYS_fork: " + SYS_fork)
    print("  SYS_execve: " + SYS_execve)

# Error handling utilities
define function check_system_result(result as Integer, operation as String):
    """Check result of system operation"""
    if result < 0:
        print("ERROR in " + operation + ": " + result)
        return false
    else:
        print("SUCCESS: " + operation + " completed")
        return true

# Performance testing
define function benchmark_memory_operations:
    """Benchmark memory operations"""
    print("Benchmarking Memory Operations...")

    create test_size as Integer = 1024 * 1024  # 1MB
    create test_buffer as pointer = memory_allocate(test_size)

    if test_buffer is not null:
        # Benchmark memset
        create start_time as Integer = read_tsc()
        memory_set(test_buffer, 0xFF, test_size)
        create end_time as Integer = read_tsc()

        create memset_time as Integer = end_time - start_time
        print("Memory set (1MB) took " + memset_time + " cycles")

        memory_free(test_buffer)
    else:
        print("ERROR: Failed to allocate benchmark buffer")

# Hardware interaction example
define function hardware_interaction_demo:
    """Demonstrate hardware interaction concepts"""
    print("Hardware Interaction Demo...")

    # These would require appropriate privileges and hardware
    print("CPU registers: EAX, EBX, ECX, EDX, ESI, EDI, ESP, EBP")
    print("I/O ports: 0x60 (keyboard), 0x3F8 (serial), 0x378 (parallel)")
    print("PCI configuration space access")
    print("Memory-mapped I/O")
    print("Interrupt handling")

# Final cleanup
define function cleanup_resources:
    """Clean up all allocated resources"""
    print("Cleaning up resources...")

    if system_buffer is not null:
        memory_free(system_buffer)
        set system_buffer to null

    cleanup_synchronization()
    print("Resource cleanup complete")

# Program entry point with proper cleanup
define function main:
    """Program entry point with error handling"""
    create result as Integer = 0

    # Initialize resources
    initialize_synchronization()

    # Run the main demonstration
    set result to program_main()

    # Clean up
    cleanup_resources()

    return result

# Constants for the demonstration
create DEMO_VERSION as String
create MAX_BUFFER_SIZE as Integer
create DEFAULT_PORT as Integer

# Feature flags
create ENABLE_NETWORKING as Boolean
create ENABLE_HARDWARE_ACCESS as Boolean
create ENABLE_KERNEL_FEATURES as Boolean

set DEMO_VERSION to "1.0"
set MAX_BUFFER_SIZE to 4096
set DEFAULT_PORT to 8080

set ENABLE_NETWORKING to false
set ENABLE_HARDWARE_ACCESS to false
set ENABLE_KERNEL_FEATURES to false

print("AGK System Programming Example v" + DEMO_VERSION)
print("This example demonstrates comprehensive system programming capabilities")
print("including memory management, file operations, threading, and hardware access")
print("")

# Run the demonstration
create exit_code as Integer = main()
print("Program completed with exit code: " + exit_code)